syntax = "proto3";
package fx.dex.v1;

import "gogoproto/gogo.proto";
import "fx/dex/v1/funding.proto";
import "fx/dex/v1/margin.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/marginxio/marginx/x/dex/v1/types";

message ResetFundingTimeProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  FundingTime funding_time = 3;
}

message ResetFundingParamsProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  Funding funding_params = 3;
}

message ResetMMATableProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  repeated MarginRateTable margin_rate_tables = 3;
}

message CreatePairProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  Pair pair = 3;
}

message Pair {
  string base_asset = 1;
  string quote_asset = 2;
  int64 market_status = 3;
  int64 price_decimal = 4;
  int64 position_decimal = 5;
  string init_price = 6;
  string market_type = 7; // Crypto or Stock
}

message ResetPremiumIndexConfigProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  PremiumIndexConf premium_index_conf = 3;
}

message ShareSplitProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  string multiplier = 3;
  string pair_id = 4;
}

message TradingFeeSpendProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  string recipient = 3;
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message TradingFeeSpendProposalWithDeposit {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string title = 1 [ (gogoproto.moretags) = "yaml:\"title\"" ];
  string description = 2 [ (gogoproto.moretags) = "yaml:\"description\"" ];
  string recipient = 3 [ (gogoproto.moretags) = "yaml:\"recipient\"" ];
  string amount = 4 [ (gogoproto.moretags) = "yaml:\"amount\"" ];
  string deposit = 5 [ (gogoproto.moretags) = "yaml:\"deposit\"" ];
}

message UnlistPairProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  string pair_id = 3;
  string fee_receiver = 4;
}

message SendToFxcoreProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  string title = 1;
  string description = 2;
  string fee_receiver = 3;
  string channel = 4;
}
